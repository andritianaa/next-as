datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post            Post[]
  Seen            Seen[]
  Rating          Rating[]
  Comment         Comment[]
  privileges      Privilege[]
  CommentReaction CommentReaction[]
}

enum Privilege {
  SU
  REDACTOR
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   Int     @id @default(autoincrement())
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//blog
model Post {
  id           Int            @id @default(autoincrement())
  authorId     Int
  title        String
  subtitle     String
  content      String
  image        String
  readTime     Int
  tagId        String
  status       PostStatus
  Seen         Seen[]
  Rating       Rating[]
  Comment      Comment[]
  PostTopicRel PostTopicRel[]

  createdAt DateTime
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum PostStatus {
  draft
  online
  archive
}

model Comment {
  id            Int               @id @default(autoincrement())
  content       String
  postId        Int
  userId        Int
  post          Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction      CommentReaction[]
  parentId      Int?
  parent        Comment?          @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childComments Comment[]         @relation("ChildComments")
}

model Rating {
  id     Int  @id @default(autoincrement())
  value  Int
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seen {
  id     Int     @id @default(autoincrement())
  ip     String?
  postId Int
  userId Int?
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommentReaction {
  id       Int      @id @default(autoincrement())
  reaction Reaction

  userId    Int
  commentId Int
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model PostTopicRel {
  id      Int @id @default(autoincrement())
  postId  Int
  topicId Int

  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Topic {
  id           Int            @id @default(autoincrement())
  name         String
  PostTopicRel PostTopicRel[]
}

enum Reaction {
  LIKE
  DISLIKE
}

//https://app.hubql.com/?file=fil_8b5da0ba704e48c2a896cc8e11accdc7
